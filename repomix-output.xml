This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
Backend/file_graph_server.py
Frontend/file-graph-viewer/.gitignore
Frontend/file-graph-viewer/eslint.config.js
Frontend/file-graph-viewer/index.html
Frontend/file-graph-viewer/package.json
Frontend/file-graph-viewer/public/vite.svg
Frontend/file-graph-viewer/README.md
Frontend/file-graph-viewer/src/App.css
Frontend/file-graph-viewer/src/App.jsx
Frontend/file-graph-viewer/src/assets/react.svg
Frontend/file-graph-viewer/src/FileGraph.css
Frontend/file-graph-viewer/src/FileGraph.jsx
Frontend/file-graph-viewer/src/index.css
Frontend/file-graph-viewer/src/main.jsx
Frontend/file-graph-viewer/vite.config.js
package.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# backend
venv/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
</file>

<file path="Backend/file_graph_server.py">
import os, json, datetime
from pathlib import Path
from collections import namedtuple
from concurrent.futures import ThreadPoolExecutor, as_completed

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import uvicorn

# ── 1. Data model ──────────────────────────────────────────────────────────────
FileInfo = namedtuple(
    "FileInfo",
    ["path", "size", "parent_dir", "file_type", "size_on_disk", "created", "accessed"],
)

def _stat_file(path: Path, root: Path) -> FileInfo | None:
    try:
        st = path.stat()
    except (OSError, FileNotFoundError):
        return None
    return FileInfo(
        path=str(path),
        size=st.st_size,
        parent_dir=str(path.parent.relative_to(root)) or ".",
        file_type=path.suffix.lower().lstrip(".") or "<none>",
        size_on_disk=getattr(st, "st_blocks", 0) * 512,
        created=datetime.datetime.fromtimestamp(st.st_ctime).isoformat(),
        accessed=datetime.datetime.fromtimestamp(st.st_atime).isoformat(),
    )

def scan_directory_iter(root: Path, workers: int = 8):
    root = Path(root).expanduser()
    with ThreadPoolExecutor(max_workers=workers) as ex:
        futures = []
        for dirpath, dirnames, filenames in os.walk(root, topdown=True, followlinks=False):
            dirnames[:]  = [d for d in dirnames  if not d.startswith(".")]
            filenames[:] = [f for f in filenames if not f.startswith(".")]
            base = Path(dirpath)
            for name in filenames:
                full = base / name
                if full.is_symlink():
                    continue
                futures.append(ex.submit(_stat_file, full, root))
        for fut in as_completed(futures):
            if info := fut.result():
                yield info

# ── 2. FastAPI app ─────────────────────────────────────────────────────────────
app = FastAPI()

@app.get("/")
async def root():
    return {
        "status": "ok",
        "ws_endpoint": "/ws"
    }

@app.websocket("/ws")
async def crawl_ws(ws: WebSocket, workers: int = 8):
    await ws.accept()
    try:
        # Wait for a message from the client specifying the root directory
        msg = await ws.receive_text()
        data = json.loads(msg)
        if data.get("type") != "start" or "root" not in data:
            await ws.send_text(json.dumps({"error": "Expected message of type 'start' with 'root'"}))
            await ws.close(code=1003)
            return

        scan_root = Path(data["root"]).expanduser()
        if not scan_root.exists() or not scan_root.is_dir():
            await ws.send_text(json.dumps({"error": f"Invalid directory: {scan_root}"}))
            await ws.close(code=1003)
            return

        # Stream file info
        for info in scan_directory_iter(scan_root, workers):
            await ws.send_text(json.dumps(info._asdict()))
        await ws.close(code=1000)

    except WebSocketDisconnect:
        return
    except Exception as e:
        await ws.send_text(json.dumps({"error": str(e)}))
        await ws.close(code=1011)

# ── 3. Run app ─────────────────────────────────────────────────────────────
if __name__ == "__main__":
    uvicorn.run("file_graph_server:app", host="0.0.0.0", port=8000, reload=True)
</file>

<file path="Frontend/file-graph-viewer/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="Frontend/file-graph-viewer/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="Frontend/file-graph-viewer/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="Frontend/file-graph-viewer/package.json">
{
  "name": "file-graph-viewer",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react-swc": "^3.8.0",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.1"
  }
}
</file>

<file path="Frontend/file-graph-viewer/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="Frontend/file-graph-viewer/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="Frontend/file-graph-viewer/src/App.css">
/* #root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
 */
 * {margin: auto;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Inter', sans-serif;
  font-size: 16px;
  line-height: 1.5;
  color: #333;
  background-color: #f9f9f9;
 }
</file>

<file path="Frontend/file-graph-viewer/src/App.jsx">
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

import FileGraph from "./FileGraph";

export default function App() {
  return (<><FileGraph  /> 
  <div className="test_output">HELP</div>
  </>);
}
</file>

<file path="Frontend/file-graph-viewer/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="Frontend/file-graph-viewer/src/FileGraph.css">
.toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    background-color: #f0f0f0;
    z-index: 1000;
}
</file>

<file path="Frontend/file-graph-viewer/src/FileGraph.jsx">
import { useEffect, useRef, useState, useCallback } from "react";
import * as d3 from "d3";

/*
    -> Running the app:
        FileGraph.jsx -> npm run dev
        file-graph-server-py -> uvicorn file_graph_server:app --reload

    -> Recreating Python venvironment:
        python -m venv venv
        venv\Scripts\activate
        pip install -r requirements.txt
    

TO DO:

- [ ] Add a button to toggle between "show all files" and "show only children" 
      //this will only display the children of the selected node and the node itself
- [ ] Add a button to toggle between show files and show folders
      //this will allow the user to see only the folders or files in the graph sized with the aggregate size of the files in the folder
- [ ] add a slider for adjesting size of nodes
      //this will allow the user to adjust the size of all of the nodes in the graph
      //this will be a global setting and not a per node setting and will be a multiplier for the size of the node


- [ ] add file statistics menu
- [ ] create modal for file statistics as well as errors
- [ ] fix population of nodes from top left corner
- [ ] fix websocket/ server connection error handling
- [ ] add buttons for using the tool from react rather then the cli

*/

export default function FileGraph() {
  const svgRef = useRef(null);
  const [nodes, setNodes] = useState([]);
  const [rawFiles, setRawFiles] = useState({});
  const [outputMessage, setOutputMessage] = useState("");
  const [showLabels, setShowLabels] = useState(true);
  const [selectedNode, setSelectedNode] = useState(null);
  // force parameters
  const [linkDistance, setLinkDistance] = useState(50);
  const [chargeStrength, setChargeStrength] = useState(-100);
  const [collidePadding, setCollidePadding] = useState(2);
  const [centerStrength, setCenterStrength] = useState(0.1);

  /*─────────────────────────────────────────────────────────
   * 1. WebSocket — stream FileInfo objects
   *────────────────────────────────────────────────────────*/
  useEffect(() => {
    const ws = new WebSocket("ws://localhost:8000/ws");
    ws.onopen = () => setOutputMessage("WebSocket connected");
    ws.onmessage = e => {
      const info = JSON.parse(e.data);
      setRawFiles(prev => ({ ...prev, [info.path]: info }));
      setNodes(prev => [...prev, info]);
    };
    ws.onerror = () => setOutputMessage("WebSocket error");
    ws.onclose = ev => setOutputMessage(ev.wasClean ? "WebSocket closed" : "WebSocket lost");
    return () => ws.close();
  }, []);

  /*─────────────────────────────────────────────────────────
   * 2. Build graph + render with D3
   *────────────────────────────────────────────────────────*/
  useEffect(() => {
    const svgEl = svgRef.current;
    if (!svgEl || nodes.length === 0) return;

    /*—— Setup ——*/
    const W = svgEl.clientWidth, H = svgEl.clientHeight;
    const svg = d3.select(svgEl).attr("viewBox", `0 0 ${W} ${H}`);
    svg.selectAll("*").remove();
    const gRoot = svg.append("g");           // zoom container root
    svg.call(d3.zoom().scaleExtent([0.1,8]).on("zoom", e => gRoot.attr("transform", e.transform)));

    /*—— Helpers ——*/
    const norm = p => p.replace(/\\/g, "/");
    const firstPath = nodes[0].path;
    const parts = firstPath.split(/[\\\/]/);
    const rootFolder = parts[parts.length-2] || parts[0];
    const rootAbs = firstPath.slice(0, firstPath.lastIndexOf(rootFolder)+rootFolder.length);
    const rootId = "dir:root";

    const calcFolderSize = (relDir) => {
        if (relDir === ".") {
          return Object.values(rawFiles).reduce((s, f) => s + f.size, 0);
        }
        const prefix = relDir + "/";
        return Object.values(rawFiles).reduce((sum, f) => {
          const p = f.parent_dir.replace(/\\/g, "/");
          return (p === relDir || p.startsWith(prefix)) ? sum + f.size : sum;
        }, 0);
      };
    
      

    /*—— Directory nodes ——*/
    const dirSet = new Set();
    nodes.forEach(f => {
      const rel = norm(f.parent_dir);
      if(rel!==".") rel.split("/").reduce((acc,seg)=>{const p=acc?`${acc}/${seg}`:seg; dirSet.add(p); return p;},"");
    });
    const dirNodes = [{id:rootId,type:"dir",name:rootFolder,abs:rootAbs,rel:".",parent:rootAbs}];
    dirSet.forEach(rel=>{
      const abs = `${rootAbs}/${rel}`;
      const segs = rel.split("/");
      const name = segs.pop();
      const parentAbs = segs.length?`${rootAbs}/${segs.join('/')}`:rootAbs;
      dirNodes.push({id:`dir:${rel}`,type:"dir",name,abs,rel,parent:parentAbs});
    });

    /*—— File nodes ——*/
    const fileNodes = nodes.map(f=>{
      const relDir = norm(f.parent_dir);
      return {
        id:`file:${f.path}`,
        type:"file",
        name:f.path.split(/[\\/]/).pop().replace(/\.[^/.]+$/,""),
        size:f.size,
        path:f.path,
        parent: relDir==='.'?rootId:`dir:${relDir}`,
        abs:f.path,
        parentDir: relDir==='.'?rootAbs:`${rootAbs}/${relDir}`,
        ...f
      };
    });

    /*—— Links ——*/
    const dirLinks=[...dirSet].map(rel=>{
      const segs=rel.split("/");
      const parentRel=segs.length>1?segs.slice(0,-1).join('/'):'.';
      return {source: parentRel==='.'?rootId:`dir:${parentRel}`, target:`dir:${rel}`} ;
    });
    const fileLinks = fileNodes.map(f=>({source:f.parent,target:f.id}));
    const links=[...dirLinks,...fileLinks];

    /*—— Scales ——*/
    const sizeScale=d3.scaleSqrt().domain(d3.extent(fileNodes,d=>d.size)).range([4,20]);
    const color=d3.scaleOrdinal(["#1f77b4","#2ca02c"]);

    /*—— Draw links ——*/
    gRoot.append("g").attr("stroke","#999").attr("stroke-opacity",0.6)
      .selectAll("line").data(links).join("line").attr("stroke-width",1);

    /*—— Draw nodes ——*/
    const allNodes=[...dirNodes,...fileNodes];
    const nodeG=gRoot.append("g").selectAll("g").data(allNodes).join("g")
      .call(d3.drag().on("start",dragStart).on("drag",dragged).on("end",dragEnd))
      .style("cursor","pointer")
      .on("click",(_,d)=>{
        if(d.type==='file'){
          setSelectedNode({...rawFiles[d.path],type:'file'});
        }else{
          // total size of *all descendant* files
          const bytes = Object.values(rawFiles).filter(f=>f.parent_dir===d.rel).reduce((sum,f)=>sum+f.size,0);
          setSelectedNode({type:'dir', abs:d.abs, parent:d.parent, totalSize:bytes, totalSize: calcFolderSize(d.rel)});
        }
      });

    nodeG.append("circle").attr("r",d=>d.type==='dir'?12:sizeScale(d.size)).attr("fill",d=>d.type==='dir'?color(0):color(1));
    nodeG.append("text")
      .attr("y",d=>d.type==='dir'?-16:sizeScale(d.size)+12)
      .attr("text-anchor","middle").attr("font-size",10)
      .style("display",showLabels?null:"none")
      .text(d=>{
        const t=d.type==='dir'?d.name+'/':d.name; return t.length>12?t.slice(0,12)+'…':t;
      });

    /*—— Simulation ——*/
    const sim=d3.forceSimulation(allNodes)
      .force("link",d3.forceLink(links).id(d=>d.id).distance(linkDistance))
      .force("charge",d3.forceManyBody().strength(chargeStrength))
      .force("center",d3.forceCenter(W/2,H/2).strength(centerStrength))
      .force("collide",d3.forceCollide().radius(d=>d.type==='dir'?14:sizeScale(d.size)+collidePadding));
    sim.on("tick",()=>{
      gRoot.selectAll("line")
        .attr("x1",d=>d.source.x).attr("y1",d=>d.source.y)
        .attr("x2",d=>d.target.x).attr("y2",d=>d.target.y);
      nodeG.attr("transform",d=>`translate(${d.x},${d.y})`);
    });
    function dragStart(evt,d){ if(!evt.active) sim.alphaTarget(0.3).restart(); d.fx=d.x; d.fy=d.y; }
    function dragged(evt,d){ d.fx=evt.x; d.fy=evt.y; }
    function dragEnd(evt,d){ if(!evt.active) sim.alphaTarget(0); d.fx=null; d.fy=null; }
    return()=>sim.stop();
  },[nodes,showLabels,linkDistance,chargeStrength,collidePadding,centerStrength,rawFiles]);

  /*─────────────────────────────────────────────────────────
   * 3. UI (toolbar + tooltip)
   *────────────────────────────────────────────────────────*/
  return (
    <>
      {/* Toolbar with buttons and sliders */}
      <div style={{ padding: "8px", background: "#eee" }}>
        <button disabled>Button1</button>
        <button disabled>Button2</button>
        <button disabled>Button3</button>
        <button onClick={() => setShowLabels(v => !v)}>
          {showLabels ? "Hide labels" : "Show labels"}
        </button>
        <div style={{ marginTop: "8px" }}>
          <label>
            Link Distance: {linkDistance}
            <input
              type="range"
              min="10"
              max="200"
              value={linkDistance}
              onChange={e => setLinkDistance(+e.target.value)}
            />
          </label>
          <label style={{ marginLeft: "1rem" }}>
            Charge: {chargeStrength}
            <input
              type="range"
              min="-500"
              max="0"
              value={chargeStrength}
              onChange={e => setChargeStrength(+e.target.value)}
            />
          </label>
          <label style={{ marginLeft: "1rem" }}>
            Collide Pad: {collidePadding}
            <input
              type="range"
              min="0"
              max="50"
              value={collidePadding}
              onChange={e => setCollidePadding(+e.target.value)}
            />
          </label>
          <label style={{ marginLeft: "1rem" }}>
            Center Str: {centerStrength}
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={centerStrength}
              onChange={e => setCenterStrength(+e.target.value)}
            />
          </label>
        </div>
      </div>
      {/* Tooltip panel */}
      <div style={{
        position: "absolute",
        top: 72,
        right: 8,
        width: 700,
        background: "#fff",
        border: "1px solid #ccc",
        padding: "8px",
        maxHeight: "calc(100vh - 80px)",
        overflowY: "auto",
        fontSize: 12
      }}>
        {selectedNode ? (
          selectedNode.type==='file'? (
            <>
              <h4 style={{wordBreak:'break-all',margin:0}}>{selectedNode.path}</h4>
              <p><strong>Folder:</strong> {selectedNode.parent_dir}</p>
              <p><strong>Type:</strong> {selectedNode.file_type}</p>
              <p><strong>Size:</strong> {selectedNode.size} bytes</p>
              <p><strong>Created:</strong> {new Date(selectedNode.created).toLocaleString()}</p>
              <p><strong>Accessed:</strong> {new Date(selectedNode.accessed).toLocaleString()}</p>
            </>
          ) : (
            <>
              <h4 style={{wordBreak:'break-all',margin:0}}>{selectedNode.abs}</h4>
              <p><strong>Parent:</strong> {selectedNode.parent}</p>
              <p><strong>Total size of files in folder:</strong> {selectedNode.totalSize} bytes</p>
            </>
          )
        ) : <em>Click a node for details</em>}
      </div>
      <svg ref={svgRef} style={{width:'100%',height:'90vh',background:'#f9f9f9'}}/>
    </>
  );
}
</file>

<file path="Frontend/file-graph-viewer/src/index.css">
/* :root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
 */
</file>

<file path="Frontend/file-graph-viewer/src/main.jsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="Frontend/file-graph-viewer/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="package.json">
{
  "dependencies": {
    "d3": "^7.9.0"
  }
}
</file>

</files>
